import { BigNumber } from "ethers/utils";
import { AppABIEncodings, AppInstanceInfo, BlockchainAsset } from "./data-types";
import { Address, AppInstanceID, SolidityABIEncoderV2Struct } from "./simple-types";
export interface INodeProvider {
    onMessage(callback: (message: Node.Message) => void): any;
    sendMessage(message: Node.Message): any;
}
export declare namespace Node {
    type NetworkContext = {
        MultiSend: Address;
        NonceRegistry: Address;
        AppRegistry: Address;
        PaymentApp: Address;
        ETHBalanceRefund: Address;
    };
    enum ErrorType {
        ERROR = "error"
    }
    enum MethodName {
        GET_APP_INSTANCES = "getAppInstances",
        GET_PROPOSED_APP_INSTANCES = "getProposedAppInstances",
        PROPOSE_INSTALL = "proposeInstall",
        REJECT_INSTALL = "rejectInstall",
        INSTALL = "install",
        GET_STATE = "getState",
        GET_APP_INSTANCE_DETAILS = "getAppInstanceDetails",
        TAKE_ACTION = "takeAction",
        UNINSTALL = "uninstall",
        PROPOSE_STATE = "proposeState",
        ACCEPT_STATE = "acceptState",
        REJECT_STATE = "rejectState",
        CREATE_MULTISIG = "createMultisig",
        GET_CHANNEL_ADDRESSES = "getChannelAddresses"
    }
    enum EventName {
        INSTALL = "installEvent",
        REJECT_INSTALL = "rejectInstallEvent",
        UPDATE_STATE = "updateStateEvent",
        UNINSTALL = "uninstallEvent",
        PROPOSE_STATE = "proposeStateEvent",
        REJECT_STATE = "rejectStateEvent",
        CREATE_MULTISIG = "createMultisigEvent"
    }
    type GetAppInstancesParams = {};
    type GetProposedAppInstancesParams = {};
    type GetAppInstancesResult = {
        appInstances: AppInstanceInfo[];
    };
    type GetProposedAppInstancesResult = {
        appInstances: AppInstanceInfo[];
    };
    type ProposeInstallParams = {
        respondingAddress: Address;
        appId: Address;
        abiEncodings: AppABIEncodings;
        asset: BlockchainAsset;
        myDeposit: BigNumber;
        peerDeposit: BigNumber;
        timeout: BigNumber;
        initialState: SolidityABIEncoderV2Struct;
    };
    type ProposeInstallResult = {
        appInstanceId: AppInstanceID;
    };
    type RejectInstallParams = {
        appInstanceId: AppInstanceID;
    };
    type RejectInstallResult = {};
    type InstallParams = {
        appInstanceId: AppInstanceID;
    };
    type InstallResult = {
        appInstance: AppInstanceInfo;
    };
    type GetStateParams = {
        appInstanceId: AppInstanceID;
    };
    type GetStateResult = {
        state: SolidityABIEncoderV2Struct;
    };
    type GetAppInstanceDetailsParams = {
        appInstanceId: AppInstanceID;
    };
    type GetAppInstanceDetailsResult = {
        appInstance: AppInstanceInfo;
    };
    type TakeActionParams = {
        appInstanceId: AppInstanceID;
        action: SolidityABIEncoderV2Struct;
    };
    type TakeActionResult = {
        newState: SolidityABIEncoderV2Struct;
    };
    type UninstallParams = {
        appInstanceId: AppInstanceID;
    };
    type UninstallResult = {};
    type CreateMultisigParams = {
        owners: Address[];
    };
    type CreateMultisigResult = {
        multisigAddress: Address;
    };
    type GetChannelAddressesParams = {};
    type GetChannelAddressesResult = {
        multisigAddresses: Address[];
    };
    type MethodParams = GetAppInstancesParams | GetProposedAppInstancesParams | ProposeInstallParams | RejectInstallParams | InstallParams | GetStateParams | GetAppInstanceDetailsParams | TakeActionParams | UninstallParams | CreateMultisigParams | GetChannelAddressesParams;
    type MethodResult = GetAppInstancesResult | GetProposedAppInstancesResult | ProposeInstallResult | RejectInstallResult | InstallResult | GetStateResult | GetAppInstanceDetailsResult | TakeActionResult | UninstallResult | CreateMultisigResult | GetChannelAddressesResult;
    type InstallEventData = {
        appInstanceId: AppInstanceID;
    };
    type RejectInstallEventData = {
        appInstance: AppInstanceInfo;
    };
    type UpdateStateEventData = {
        appInstanceId: AppInstanceID;
        newState: SolidityABIEncoderV2Struct;
        action?: SolidityABIEncoderV2Struct;
    };
    type UninstallEventData = {
        appInstanceId: string;
    };
    type CreateMultisigEventData = {
        owners: Address[];
        multisigAddress: Address;
    };
    type EventData = InstallEventData | RejectInstallEventData | UpdateStateEventData | UninstallEventData | CreateMultisigEventData;
    type MethodMessage = {
        type: MethodName;
        requestId: string;
    };
    type MethodRequest = MethodMessage & {
        params: MethodParams;
    };
    type MethodResponse = MethodMessage & {
        result: MethodResult;
    };
    type Event = {
        type: EventName;
        data: EventData;
    };
    type Error = {
        type: ErrorType;
        requestId?: string;
        data: {
            errorName: string;
            message?: string;
            appInstanceId?: string;
            extra?: {
                [k: string]: string | number | boolean | object;
            };
        };
    };
    type Message = MethodRequest | MethodResponse | Event | Error;
}
